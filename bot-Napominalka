import telebot
from telebot import types
from datetime import datetime, timedelta
import time
import threading

TOKEN = "7728681304:AAG2yqlJWn-E-LeV6-fLCmhR5bqe5Vx7FDA"
bot = telebot.TeleBot(TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
user_tasks = {}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_add = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    btn_list = types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
    btn_clear = types.KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏")
    markup.add(btn_add, btn_list, btn_clear)
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –¥–µ–ª–∞ –Ω–∞ –¥–µ–Ω—å.\n"
        "–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "üóë –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏"])
def menu_handler(message):
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ß–ß:–ú–ú - –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏':")
        bot.register_next_step_handler(message, add_task_handler)
    elif message.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
        list_tasks(message)
    elif message.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏":
        clear_tasks(message)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
def add_task_handler(message):
    user_id = message.chat.id
    task_text = message.text.strip()

    # –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    task_parts = task_text.split('-', 1)
    if len(task_parts) != 2:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ß–ß:–ú–ú - –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'.")
        return

    time_text, task_description = task_parts[0].strip(), task_parts[1].strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    try:
        task_time = datetime.strptime(time_text, "%H:%M").time()
    except ValueError:
        bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ß–ß:–ú–ú'.")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_tasks:
        user_tasks[user_id] = []
    user_tasks[user_id].append((task_time, task_description))
    user_tasks[user_id].sort()  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ –≤—Ä–µ–º–µ–Ω–∏

    bot.send_message(user_id, f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {time_text} - {task_description}", reply_markup=main_menu())

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
def list_tasks(message):
    user_id = message.chat.id
    tasks = user_tasks.get(user_id, [])

    if not tasks:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.", reply_markup=main_menu())
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    task_list = "\n".join([f"{time.strftime('%H:%M')} - {desc}" for time, desc in tasks])
    bot.send_message(user_id, f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{task_list}", reply_markup=main_menu())

# –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
def clear_tasks(message):
    user_id = message.chat.id
    if user_id in user_tasks:
        user_tasks.pop(user_id)
        bot.send_message(user_id, "–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω.", reply_markup=main_menu())
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.", reply_markup=main_menu())

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def send_reminders():
    while True:
        now = datetime.now()
        for user_id, tasks in list(user_tasks.items()):
            for task_time, task_description in tasks:
                task_datetime = datetime.combine(now.date(), task_time)
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∑–∞–¥–∞—á–µ–π, –Ω–∞–ø–æ–º–Ω–∏—Ç—å
                if now + timedelta(minutes=1) >= task_datetime >= now:
                    markup = types.InlineKeyboardMarkup()
                    done_button = types.InlineKeyboardButton("–°–¥–µ–ª–∞–Ω–æ", callback_data=f"done|{task_time.strftime('%H:%M')}|{task_description}")
                    markup.add(done_button)
                    bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task_description} –≤ {task_time.strftime('%H:%M')}", reply_markup=markup)
                    # –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏, —É–¥–∞–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ –∑–¥–µ—Å—å
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        time.sleep(30)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞–Ω–æ"
@bot.callback_query_handler(func=lambda call: call.data.startswith("done|"))
def handle_done_button(call):
    user_id = call.message.chat.id
    _, time_str, task_description = call.data.split("|")
    task_time = datetime.strptime(time_str, "%H:%M").time()

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    user_tasks[user_id] = [(t, d) if (t, d) != (task_time, task_description) else ((datetime.combine(datetime.today(), t) + timedelta(days=1)).time(), d) for t, d in user_tasks[user_id]]
    bot.send_message(user_id, f"–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {task_description} –≤ {task_time.strftime('%H:%M')}", reply_markup=main_menu())

# –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
reminder_thread = threading.Thread(target=send_reminders)
reminder_thread.daemon = True  # –ü–æ—Ç–æ–∫ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
reminder_thread.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
